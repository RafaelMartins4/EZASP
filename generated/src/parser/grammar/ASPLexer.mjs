// Generated from src/parser/grammar/ASP.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,44,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,
3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,160,8,18,10,18,12,18,163,9,
18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,172,8,19,10,19,12,19,175,9,19,
1,19,1,19,5,19,179,8,19,10,19,12,19,182,9,19,1,19,1,19,1,20,1,20,1,20,5,
20,189,8,20,10,20,12,20,192,9,20,1,20,3,20,195,8,20,1,21,1,21,1,22,1,22,
1,23,5,23,202,8,23,10,23,12,23,205,9,23,1,23,1,23,5,23,209,8,23,10,23,12,
23,212,9,23,1,24,5,24,215,8,24,10,24,12,24,218,9,24,1,24,1,24,5,24,222,8,
24,10,24,12,24,225,9,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,28,1,28,1,28,5,28,242,8,28,10,28,12,28,245,9,28,3,28,247,8,28,
1,29,1,29,5,29,251,8,29,10,29,12,29,254,9,29,1,29,1,29,1,30,1,30,1,31,1,
31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,271,8,32,1,33,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
33,1,33,3,33,291,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,4,43,313,8,43,11,43,12,
43,314,1,43,1,43,1,161,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,1,0,11,1,0,42,
42,1,0,37,37,3,0,10,10,13,13,42,42,2,0,10,10,13,13,1,0,97,122,4,0,48,57,
65,90,95,95,97,122,1,0,65,90,1,0,49,57,1,0,48,57,3,0,10,10,13,13,34,34,3,
0,9,10,13,13,32,32,337,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
1,0,0,0,1,89,1,0,0,0,3,96,1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,103,1,0,0,
0,11,105,1,0,0,0,13,107,1,0,0,0,15,109,1,0,0,0,17,119,1,0,0,0,19,129,1,0,
0,0,21,131,1,0,0,0,23,134,1,0,0,0,25,136,1,0,0,0,27,142,1,0,0,0,29,144,1,
0,0,0,31,146,1,0,0,0,33,148,1,0,0,0,35,151,1,0,0,0,37,155,1,0,0,0,39,167,
1,0,0,0,41,185,1,0,0,0,43,196,1,0,0,0,45,198,1,0,0,0,47,203,1,0,0,0,49,216,
1,0,0,0,51,226,1,0,0,0,53,228,1,0,0,0,55,233,1,0,0,0,57,246,1,0,0,0,59,248,
1,0,0,0,61,257,1,0,0,0,63,259,1,0,0,0,65,270,1,0,0,0,67,290,1,0,0,0,69,292,
1,0,0,0,71,294,1,0,0,0,73,296,1,0,0,0,75,298,1,0,0,0,77,300,1,0,0,0,79,302,
1,0,0,0,81,304,1,0,0,0,83,306,1,0,0,0,85,308,1,0,0,0,87,312,1,0,0,0,89,90,
5,35,0,0,90,91,5,99,0,0,91,92,5,111,0,0,92,93,5,110,0,0,93,94,5,115,0,0,
94,95,5,116,0,0,95,2,1,0,0,0,96,97,5,58,0,0,97,98,5,45,0,0,98,4,1,0,0,0,
99,100,5,123,0,0,100,6,1,0,0,0,101,102,5,59,0,0,102,8,1,0,0,0,103,104,5,
125,0,0,104,10,1,0,0,0,105,106,5,58,0,0,106,12,1,0,0,0,107,108,5,44,0,0,
108,14,1,0,0,0,109,110,5,35,0,0,110,111,5,109,0,0,111,112,5,105,0,0,112,
113,5,110,0,0,113,114,5,105,0,0,114,115,5,109,0,0,115,116,5,105,0,0,116,
117,5,122,0,0,117,118,5,101,0,0,118,16,1,0,0,0,119,120,5,35,0,0,120,121,
5,109,0,0,121,122,5,97,0,0,122,123,5,120,0,0,123,124,5,105,0,0,124,125,5,
109,0,0,125,126,5,105,0,0,126,127,5,122,0,0,127,128,5,101,0,0,128,18,1,0,
0,0,129,130,5,64,0,0,130,20,1,0,0,0,131,132,5,58,0,0,132,133,5,126,0,0,133,
22,1,0,0,0,134,135,5,91,0,0,135,24,1,0,0,0,136,137,5,35,0,0,137,138,5,115,
0,0,138,139,5,104,0,0,139,140,5,111,0,0,140,141,5,119,0,0,141,26,1,0,0,0,
142,143,5,40,0,0,143,28,1,0,0,0,144,145,5,41,0,0,145,30,1,0,0,0,146,147,
5,124,0,0,147,32,1,0,0,0,148,149,5,46,0,0,149,150,5,46,0,0,150,34,1,0,0,
0,151,152,5,110,0,0,152,153,5,111,0,0,153,154,5,116,0,0,154,36,1,0,0,0,155,
156,5,37,0,0,156,157,5,42,0,0,157,161,1,0,0,0,158,160,9,0,0,0,159,158,1,
0,0,0,160,163,1,0,0,0,161,162,1,0,0,0,161,159,1,0,0,0,162,164,1,0,0,0,163,
161,1,0,0,0,164,165,5,42,0,0,165,166,5,37,0,0,166,38,1,0,0,0,167,168,5,37,
0,0,168,169,5,42,0,0,169,173,1,0,0,0,170,172,8,0,0,0,171,170,1,0,0,0,172,
175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,180,1,0,0,0,175,173,1,0,
0,0,176,177,5,42,0,0,177,179,8,1,0,0,178,176,1,0,0,0,179,182,1,0,0,0,180,
178,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,0,
0,1,184,40,1,0,0,0,185,186,5,37,0,0,186,190,8,2,0,0,187,189,8,3,0,0,188,
187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,
0,0,192,190,1,0,0,0,193,195,7,3,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,
42,1,0,0,0,196,197,5,46,0,0,197,44,1,0,0,0,198,199,5,93,0,0,199,46,1,0,0,
0,200,202,3,51,25,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,
204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,210,7,4,0,0,207,209,7,5,
0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
48,1,0,0,0,212,210,1,0,0,0,213,215,3,51,25,0,214,213,1,0,0,0,215,218,1,0,
0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,
223,7,6,0,0,220,222,7,5,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,
0,0,223,224,1,0,0,0,224,50,1,0,0,0,225,223,1,0,0,0,226,227,5,95,0,0,227,
52,1,0,0,0,228,229,5,35,0,0,229,230,5,115,0,0,230,231,5,117,0,0,231,232,
5,112,0,0,232,54,1,0,0,0,233,234,5,35,0,0,234,235,5,105,0,0,235,236,5,110,
0,0,236,237,5,102,0,0,237,56,1,0,0,0,238,247,5,48,0,0,239,243,7,7,0,0,240,
242,7,8,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,
0,0,244,247,1,0,0,0,245,243,1,0,0,0,246,238,1,0,0,0,246,239,1,0,0,0,247,
58,1,0,0,0,248,252,5,34,0,0,249,251,8,9,0,0,250,249,1,0,0,0,251,254,1,0,
0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,
256,5,34,0,0,256,60,1,0,0,0,257,258,5,61,0,0,258,62,1,0,0,0,259,260,5,61,
0,0,260,261,5,61,0,0,261,64,1,0,0,0,262,271,5,60,0,0,263,264,5,60,0,0,264,
271,5,61,0,0,265,266,5,33,0,0,266,271,5,61,0,0,267,268,5,62,0,0,268,271,
5,61,0,0,269,271,5,62,0,0,270,262,1,0,0,0,270,263,1,0,0,0,270,265,1,0,0,
0,270,267,1,0,0,0,270,269,1,0,0,0,271,66,1,0,0,0,272,273,5,35,0,0,273,274,
5,99,0,0,274,275,5,111,0,0,275,276,5,117,0,0,276,277,5,110,0,0,277,291,5,
116,0,0,278,279,5,35,0,0,279,280,5,115,0,0,280,281,5,117,0,0,281,291,5,109,
0,0,282,283,5,35,0,0,283,284,5,109,0,0,284,285,5,97,0,0,285,291,5,120,0,
0,286,287,5,35,0,0,287,288,5,109,0,0,288,289,5,105,0,0,289,291,5,110,0,0,
290,272,1,0,0,0,290,278,1,0,0,0,290,282,1,0,0,0,290,286,1,0,0,0,291,68,1,
0,0,0,292,293,5,45,0,0,293,70,1,0,0,0,294,295,5,43,0,0,295,72,1,0,0,0,296,
297,5,63,0,0,297,74,1,0,0,0,298,299,5,94,0,0,299,76,1,0,0,0,300,301,5,42,
0,0,301,78,1,0,0,0,302,303,5,47,0,0,303,80,1,0,0,0,304,305,5,92,0,0,305,
82,1,0,0,0,306,307,5,38,0,0,307,84,1,0,0,0,308,309,5,42,0,0,309,310,5,42,
0,0,310,86,1,0,0,0,311,313,7,10,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,
312,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,6,43,0,0,317,88,1,0,
0,0,16,0,161,173,180,190,194,203,210,216,223,243,246,252,270,290,314,1,6,
0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ASPLexer extends antlr4.Lexer {

    static grammarFileName = "ASP.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'#const'", "':-'", "'{'", "';'", "'}'", 
                         "':'", "','", "'#minimize'", "'#maximize'", "'@'", 
                         "':~'", "'['", "'#show'", "'('", "')'", "'|'", 
                         "'..'", "'not'", null, null, null, "'.'", "']'", 
                         null, null, "'_'", "'#sup'", "'#inf'", null, null, 
                         "'='", "'=='", null, null, "'-'", "'+'", "'?'", 
                         "'^'", "'*'", "'/'", "'\\'", "'&'", "'**'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, "NOT", "BLOCK_COMMENT", "UNCLOSED_COMMENT", 
                          "LINE_COMMENT", "DOT", "EOWC", "CONSTANT", "VARIABLE", 
                          "UNDERSCORE", "SUP", "INF", "NUMBER", "STRING", 
                          "EQ", "EQEQ", "COMPARATOR", "AGGREGATE_FUNCTION", 
                          "CLASSICAL_NEGATION", "ADDITION", "OR", "EXCLUSIVE_OR", 
                          "MULTIPLICATION", "DIVISION", "MODULO", "AND", 
                          "EXPONENTIATION", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "NOT", "BLOCK_COMMENT", 
                      "UNCLOSED_COMMENT", "LINE_COMMENT", "DOT", "EOWC", 
                      "CONSTANT", "VARIABLE", "UNDERSCORE", "SUP", "INF", 
                      "NUMBER", "STRING", "EQ", "EQEQ", "COMPARATOR", "AGGREGATE_FUNCTION", 
                      "CLASSICAL_NEGATION", "ADDITION", "OR", "EXCLUSIVE_OR", 
                      "MULTIPLICATION", "DIVISION", "MODULO", "AND", "EXPONENTIATION", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ASPLexer.EOF = antlr4.Token.EOF;
ASPLexer.T__0 = 1;
ASPLexer.T__1 = 2;
ASPLexer.T__2 = 3;
ASPLexer.T__3 = 4;
ASPLexer.T__4 = 5;
ASPLexer.T__5 = 6;
ASPLexer.T__6 = 7;
ASPLexer.T__7 = 8;
ASPLexer.T__8 = 9;
ASPLexer.T__9 = 10;
ASPLexer.T__10 = 11;
ASPLexer.T__11 = 12;
ASPLexer.T__12 = 13;
ASPLexer.T__13 = 14;
ASPLexer.T__14 = 15;
ASPLexer.T__15 = 16;
ASPLexer.T__16 = 17;
ASPLexer.NOT = 18;
ASPLexer.BLOCK_COMMENT = 19;
ASPLexer.UNCLOSED_COMMENT = 20;
ASPLexer.LINE_COMMENT = 21;
ASPLexer.DOT = 22;
ASPLexer.EOWC = 23;
ASPLexer.CONSTANT = 24;
ASPLexer.VARIABLE = 25;
ASPLexer.UNDERSCORE = 26;
ASPLexer.SUP = 27;
ASPLexer.INF = 28;
ASPLexer.NUMBER = 29;
ASPLexer.STRING = 30;
ASPLexer.EQ = 31;
ASPLexer.EQEQ = 32;
ASPLexer.COMPARATOR = 33;
ASPLexer.AGGREGATE_FUNCTION = 34;
ASPLexer.CLASSICAL_NEGATION = 35;
ASPLexer.ADDITION = 36;
ASPLexer.OR = 37;
ASPLexer.EXCLUSIVE_OR = 38;
ASPLexer.MULTIPLICATION = 39;
ASPLexer.DIVISION = 40;
ASPLexer.MODULO = 41;
ASPLexer.AND = 42;
ASPLexer.EXPONENTIATION = 43;
ASPLexer.WS = 44;



