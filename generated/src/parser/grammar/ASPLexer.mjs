// Generated from src/parser/grammar/ASP.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,43,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,
12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
1,16,5,16,153,8,16,10,16,12,16,156,9,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
17,5,17,165,8,17,10,17,12,17,168,9,17,1,17,1,17,5,17,172,8,17,10,17,12,17,
175,9,17,1,17,1,17,1,18,1,18,1,18,5,18,182,8,18,10,18,12,18,185,9,18,1,18,
3,18,188,8,18,1,19,1,19,1,20,1,20,1,21,5,21,195,8,21,10,21,12,21,198,9,21,
1,21,1,21,5,21,202,8,21,10,21,12,21,205,9,21,1,22,5,22,208,8,22,10,22,12,
22,211,9,22,1,22,1,22,5,22,215,8,22,10,22,12,22,218,9,22,1,23,1,23,1,24,
1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,5,26,235,8,26,
10,26,12,26,238,9,26,3,26,240,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
28,5,28,250,8,28,10,28,12,28,253,9,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,270,8,31,1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
32,290,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,4,42,312,8,42,11,42,12,42,313,1,
42,1,42,1,154,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,1,0,11,1,0,42,42,1,0,37,37,
3,0,10,10,13,13,42,42,2,0,10,10,13,13,1,0,97,122,4,0,48,57,65,90,95,95,97,
122,1,0,65,90,1,0,49,57,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,
32,336,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,94,1,
0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,105,1,0,
0,0,15,107,1,0,0,0,17,117,1,0,0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,132,1,
0,0,0,25,134,1,0,0,0,27,140,1,0,0,0,29,142,1,0,0,0,31,144,1,0,0,0,33,148,
1,0,0,0,35,160,1,0,0,0,37,178,1,0,0,0,39,189,1,0,0,0,41,191,1,0,0,0,43,196,
1,0,0,0,45,209,1,0,0,0,47,219,1,0,0,0,49,221,1,0,0,0,51,226,1,0,0,0,53,239,
1,0,0,0,55,241,1,0,0,0,57,247,1,0,0,0,59,256,1,0,0,0,61,258,1,0,0,0,63,269,
1,0,0,0,65,289,1,0,0,0,67,291,1,0,0,0,69,293,1,0,0,0,71,295,1,0,0,0,73,297,
1,0,0,0,75,299,1,0,0,0,77,301,1,0,0,0,79,303,1,0,0,0,81,305,1,0,0,0,83,307,
1,0,0,0,85,311,1,0,0,0,87,88,5,35,0,0,88,89,5,99,0,0,89,90,5,111,0,0,90,
91,5,110,0,0,91,92,5,115,0,0,92,93,5,116,0,0,93,2,1,0,0,0,94,95,5,58,0,0,
95,96,5,45,0,0,96,4,1,0,0,0,97,98,5,123,0,0,98,6,1,0,0,0,99,100,5,59,0,0,
100,8,1,0,0,0,101,102,5,125,0,0,102,10,1,0,0,0,103,104,5,58,0,0,104,12,1,
0,0,0,105,106,5,44,0,0,106,14,1,0,0,0,107,108,5,35,0,0,108,109,5,109,0,0,
109,110,5,105,0,0,110,111,5,110,0,0,111,112,5,105,0,0,112,113,5,109,0,0,
113,114,5,105,0,0,114,115,5,122,0,0,115,116,5,101,0,0,116,16,1,0,0,0,117,
118,5,35,0,0,118,119,5,109,0,0,119,120,5,97,0,0,120,121,5,120,0,0,121,122,
5,105,0,0,122,123,5,109,0,0,123,124,5,105,0,0,124,125,5,122,0,0,125,126,
5,101,0,0,126,18,1,0,0,0,127,128,5,64,0,0,128,20,1,0,0,0,129,130,5,58,0,
0,130,131,5,126,0,0,131,22,1,0,0,0,132,133,5,91,0,0,133,24,1,0,0,0,134,135,
5,35,0,0,135,136,5,115,0,0,136,137,5,104,0,0,137,138,5,111,0,0,138,139,5,
119,0,0,139,26,1,0,0,0,140,141,5,40,0,0,141,28,1,0,0,0,142,143,5,41,0,0,
143,30,1,0,0,0,144,145,5,110,0,0,145,146,5,111,0,0,146,147,5,116,0,0,147,
32,1,0,0,0,148,149,5,37,0,0,149,150,5,42,0,0,150,154,1,0,0,0,151,153,9,0,
0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,155,1,0,0,0,154,152,1,0,0,0,155,
157,1,0,0,0,156,154,1,0,0,0,157,158,5,42,0,0,158,159,5,37,0,0,159,34,1,0,
0,0,160,161,5,37,0,0,161,162,5,42,0,0,162,166,1,0,0,0,163,165,8,0,0,0,164,
163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,173,1,0,
0,0,168,166,1,0,0,0,169,170,5,42,0,0,170,172,8,1,0,0,171,169,1,0,0,0,172,
175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,
0,0,176,177,5,0,0,1,177,36,1,0,0,0,178,179,5,37,0,0,179,183,8,2,0,0,180,
182,8,3,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,
0,0,184,187,1,0,0,0,185,183,1,0,0,0,186,188,7,3,0,0,187,186,1,0,0,0,187,
188,1,0,0,0,188,38,1,0,0,0,189,190,5,46,0,0,190,40,1,0,0,0,191,192,5,93,
0,0,192,42,1,0,0,0,193,195,3,47,23,0,194,193,1,0,0,0,195,198,1,0,0,0,196,
194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,203,7,4,
0,0,200,202,7,5,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,
204,1,0,0,0,204,44,1,0,0,0,205,203,1,0,0,0,206,208,3,47,23,0,207,206,1,0,
0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,
209,1,0,0,0,212,216,7,6,0,0,213,215,7,5,0,0,214,213,1,0,0,0,215,218,1,0,
0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,46,1,0,0,0,218,216,1,0,0,0,219,220,
5,95,0,0,220,48,1,0,0,0,221,222,5,35,0,0,222,223,5,115,0,0,223,224,5,117,
0,0,224,225,5,112,0,0,225,50,1,0,0,0,226,227,5,35,0,0,227,228,5,105,0,0,
228,229,5,110,0,0,229,230,5,102,0,0,230,52,1,0,0,0,231,240,5,48,0,0,232,
236,7,7,0,0,233,235,7,8,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,
0,0,236,237,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,239,231,1,0,0,0,239,
232,1,0,0,0,240,54,1,0,0,0,241,242,3,53,26,0,242,243,5,46,0,0,243,244,5,
46,0,0,244,245,1,0,0,0,245,246,3,53,26,0,246,56,1,0,0,0,247,251,5,34,0,0,
248,250,8,9,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,
1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,5,34,0,0,255,58,1,0,0,0,
256,257,5,61,0,0,257,60,1,0,0,0,258,259,5,61,0,0,259,260,5,61,0,0,260,62,
1,0,0,0,261,270,5,60,0,0,262,263,5,60,0,0,263,270,5,61,0,0,264,265,5,33,
0,0,265,270,5,61,0,0,266,267,5,62,0,0,267,270,5,61,0,0,268,270,5,62,0,0,
269,261,1,0,0,0,269,262,1,0,0,0,269,264,1,0,0,0,269,266,1,0,0,0,269,268,
1,0,0,0,270,64,1,0,0,0,271,272,5,35,0,0,272,273,5,99,0,0,273,274,5,111,0,
0,274,275,5,117,0,0,275,276,5,110,0,0,276,290,5,116,0,0,277,278,5,35,0,0,
278,279,5,115,0,0,279,280,5,117,0,0,280,290,5,109,0,0,281,282,5,35,0,0,282,
283,5,109,0,0,283,284,5,97,0,0,284,290,5,120,0,0,285,286,5,35,0,0,286,287,
5,109,0,0,287,288,5,105,0,0,288,290,5,110,0,0,289,271,1,0,0,0,289,277,1,
0,0,0,289,281,1,0,0,0,289,285,1,0,0,0,290,66,1,0,0,0,291,292,5,45,0,0,292,
68,1,0,0,0,293,294,5,43,0,0,294,70,1,0,0,0,295,296,5,63,0,0,296,72,1,0,0,
0,297,298,5,94,0,0,298,74,1,0,0,0,299,300,5,42,0,0,300,76,1,0,0,0,301,302,
5,47,0,0,302,78,1,0,0,0,303,304,5,92,0,0,304,80,1,0,0,0,305,306,5,38,0,0,
306,82,1,0,0,0,307,308,5,42,0,0,308,309,5,42,0,0,309,84,1,0,0,0,310,312,
7,10,0,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,
314,315,1,0,0,0,315,316,6,42,0,0,316,86,1,0,0,0,16,0,154,166,173,183,187,
196,203,209,216,236,239,251,269,289,313,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ASPLexer extends antlr4.Lexer {

    static grammarFileName = "ASP.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'#const'", "':-'", "'{'", "';'", "'}'", 
                         "':'", "','", "'#minimize'", "'#maximize'", "'@'", 
                         "':~'", "'['", "'#show'", "'('", "')'", "'not'", 
                         null, null, null, "'.'", "']'", null, null, "'_'", 
                         "'#sup'", "'#inf'", null, null, null, "'='", "'=='", 
                         null, null, "'-'", "'+'", "'?'", "'^'", "'*'", 
                         "'/'", "'\\'", "'&'", "'**'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "NOT", "BLOCK_COMMENT", "UNCLOSED_COMMENT", "LINE_COMMENT", 
                          "DOT", "EOWC", "CONSTANT", "VARIABLE", "UNDERSCORE", 
                          "SUP", "INF", "NUMBER", "INTERVAL", "STRING", 
                          "EQ", "EQEQ", "COMPARATOR", "AGGREGATE_FUNCTION", 
                          "CLASSICAL_NEGATION", "ADDITION", "OR", "EXCLUSIVE_OR", 
                          "MULTIPLICATION", "DIVISION", "MODULO", "AND", 
                          "EXPONENTIATION", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "NOT", "BLOCK_COMMENT", "UNCLOSED_COMMENT", 
                      "LINE_COMMENT", "DOT", "EOWC", "CONSTANT", "VARIABLE", 
                      "UNDERSCORE", "SUP", "INF", "NUMBER", "INTERVAL", 
                      "STRING", "EQ", "EQEQ", "COMPARATOR", "AGGREGATE_FUNCTION", 
                      "CLASSICAL_NEGATION", "ADDITION", "OR", "EXCLUSIVE_OR", 
                      "MULTIPLICATION", "DIVISION", "MODULO", "AND", "EXPONENTIATION", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ASPLexer.EOF = antlr4.Token.EOF;
ASPLexer.T__0 = 1;
ASPLexer.T__1 = 2;
ASPLexer.T__2 = 3;
ASPLexer.T__3 = 4;
ASPLexer.T__4 = 5;
ASPLexer.T__5 = 6;
ASPLexer.T__6 = 7;
ASPLexer.T__7 = 8;
ASPLexer.T__8 = 9;
ASPLexer.T__9 = 10;
ASPLexer.T__10 = 11;
ASPLexer.T__11 = 12;
ASPLexer.T__12 = 13;
ASPLexer.T__13 = 14;
ASPLexer.T__14 = 15;
ASPLexer.NOT = 16;
ASPLexer.BLOCK_COMMENT = 17;
ASPLexer.UNCLOSED_COMMENT = 18;
ASPLexer.LINE_COMMENT = 19;
ASPLexer.DOT = 20;
ASPLexer.EOWC = 21;
ASPLexer.CONSTANT = 22;
ASPLexer.VARIABLE = 23;
ASPLexer.UNDERSCORE = 24;
ASPLexer.SUP = 25;
ASPLexer.INF = 26;
ASPLexer.NUMBER = 27;
ASPLexer.INTERVAL = 28;
ASPLexer.STRING = 29;
ASPLexer.EQ = 30;
ASPLexer.EQEQ = 31;
ASPLexer.COMPARATOR = 32;
ASPLexer.AGGREGATE_FUNCTION = 33;
ASPLexer.CLASSICAL_NEGATION = 34;
ASPLexer.ADDITION = 35;
ASPLexer.OR = 36;
ASPLexer.EXCLUSIVE_OR = 37;
ASPLexer.MULTIPLICATION = 38;
ASPLexer.DIVISION = 39;
ASPLexer.MODULO = 40;
ASPLexer.AND = 41;
ASPLexer.EXPONENTIATION = 42;
ASPLexer.WS = 43;



